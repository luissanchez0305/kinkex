<div class="entry-edit">
    <fieldset id="grop_fields">
        <input type="hidden" name="import_params[category_ids]" id="amazon_import_product_categories" value="<?php echo $this->getIdsString() ?>">
        <div id="product-categories" class="tree"></div>
    </fieldset>
</div>

<script type="text/javascript">
//<![CDATA[
    var tree = null;
    var idsChecked = null;
    var idsBack = null;
    var collapseByDefault = <?php echo (int)Mage::helper('amazonimportproducts')->getConfigParam('general/amazon_category_tree_collapsed')?>;

    function openExistingCategoriesSelector()
    {
        loadTree();
        var height = $('html-body').getHeight();
        $('amazon-catselector-window-mask').setStyle({'height':height+'px'});
        toggleSelectsUnderBlock($('amazon-catselector-window-mask'), false);
        Element.show('amazon-catselector-window-mask');
        $('amazon-catselector-window').addClassName('show');
        $('amazon-catselector-window').scrollTo();
    }

    function closeExistingCategoriesSelector()
    {
        toggleSelectsUnderBlock($('amazon-catselector-window-mask'), true);
        Element.hide('amazon-catselector-window-mask');
        $('amazon-catselector-window').removeClassName('show');
    }

    function loadTree()
    {
        if (tree) return;

        var categoryLoader = new Ext.tree.TreeLoader({
           dataUrl: '<?php echo $this->getLoadTreeUrl()?>'
        });

        categoryLoader.createNode = function(config) {
            config.uiProvider = Ext.tree.CheckboxNodeUI;
            var node;
            if (config.children && !config.children.length) {
                delete(config.children);
                node = new Ext.tree.AsyncTreeNode(config);

            } else {
                node = new Ext.tree.TreeNode(config);
            }
            return node;
        };

        categoryLoader.on("beforeload", function(treeLoader, node) {
            treeLoader.baseParams.category = node.attributes.id;
        });

        categoryLoader.on("load", function(treeLoader, node, config) {
            varienWindowOnload();
        });

        tree = new Ext.tree.TreePanel('product-categories', {
            animate:true,
            loader: categoryLoader,
            enableDD:false,
            containerScroll: true,
            rootUIProvider: Ext.tree.CheckboxNodeUI,
            selModel: new Ext.tree.CheckNodeMultiSelectionModel(),
            rootVisible: '<?php echo $this->getRootNode()->getIsVisible() ?>',
        });

        tree.on('check', function(node) {
            if(node.attributes.checked) {
                categoryAdd(node.id);
            } else {
                categoryRemove(node.id);
            }
            varienElementMethods.setHasChanges(node.getUI().checkbox);
        }, tree);

        // set the root node
        var root = new Ext.tree.TreeNode({
            text: '<?php echo $this->jsQuoteEscape($this->getRootNode()->getName()) ?>',
            draggable:false,
            checked:'<?php echo $this->getRootNode()->getChecked() ?>',
            id:'<?php echo $this->getRootNode()->getId() ?>',
            disabled: <?php echo ($this->getRootNode()->getDisabled() ? 'true' : 'false') ?>,
            uiProvider: Ext.tree.CheckboxNodeUI
        });

        tree.setRootNode(root);
        bildCategoryTree(root, <?php echo $this->getTreeJson(); ?>);
        tree.addListener('click', categoryClick.createDelegate(this));

        tree.render();
        if (collapseByDefault) treeCollapseAll();

        idsChecked = idsBack = tree.getChecked();
    }

    function bildCategoryTree(parent, config)
    {
        if (!config) return null;

        if (parent && config && config.length){
            for (var i = 0; i < config.length; i++){
                config[i].uiProvider = Ext.tree.CheckboxNodeUI;
                var node;
                var _node = Object.clone(config[i]);
                if (_node.children && !_node.children.length) {
                    delete(_node.children);
                    node = new Ext.tree.AsyncTreeNode(_node);

                } else {
                    node = new Ext.tree.TreeNode(config[i]);
                }
                parent.appendChild(node);
                node.loader = node.getOwnerTree().loader;
                if(config[i].children){
                    bildCategoryTree(node, config[i].children);
                }
            }
        }
    }

    function categoryClick(node, e){
        if (node.disabled) {
            return;
        }
        node.getUI().check(!node.getUI().checked());
        varienElementMethods.setHasChanges(Event.element(e), e);
    };
    function categoryAdd(id) {
        var ids = $('amazon_import_product_categories').value.split(',');
        ids.push(id);
        $('amazon_import_product_categories').value = ids.join(',');
    }
    function categoryRemove(id) {
        var ids = $('amazon_import_product_categories').value.split(',');
        // bug #7654 fixed
        while (-1 != ids.indexOf(id)) {
            ids.splice(ids.indexOf(id), 1);
        }
        $('amazon_import_product_categories').value = ids.join(',');
    }

    function resetChecked()
    {
        var selNodes = tree.getChecked();
        Ext.each(selNodes, function(nodeId) {
            var node = tree.getNodeById(nodeId);
            node.getUI().toggleCheck(false);
        });

        restoreCheckingCategories(idsBack);
        closeExistingCategoriesSelector();
    }

    function restoreCheckingCategories(ids)
    {
        Ext.each(ids, function(nodeId) {
            var node = tree.getNodeById(nodeId);
            node.getUI().toggleCheck(true);
        });
    }

    function saveChecked()
    {
        idsChecked = idsBack = tree.getChecked();
        closeExistingCategoriesSelector();
        viewCheckedCategories();
    }

    function viewCheckedCategories()
    {
        var categoriesInfo = {};
        Ext.each(idsChecked, function(nodeId) {
            var node = tree.getNodeById(nodeId);
            var title = getNodeTitle(node.text);
            var ids = node.attributes.path.split('/');
            var rootCatId = ids[1];
            if (typeof categoriesInfo[rootCatId] == 'undefined') categoriesInfo[rootCatId] = {};
            categoriesInfo[rootCatId][node.id] = title;
        });
        var html = '';
        for (var rootCatId in categoriesInfo)
        {
            var rootNode = tree.getNodeById(rootCatId);
            var titles = []; var i = 0;
            for (var categoryId in categoriesInfo[rootCatId])
            {
                titles[i++] = categoriesInfo[rootCatId][categoryId];
            }
            html+= '<dt><b>' + getNodeTitle(rootNode.text) + '</b></dt><dd>' + titles.join(', ') + '</dd>';
        }
        if (html == '') html = '<?php echo $this->__('Not selected')?>';
        $('selection_existing_categories').innerHTML = html;
    }

    function getNodeTitle(text)
    {
        return text.substring(0, text.lastIndexOf('(') - 1);
    }

    function treeCollapseAll()
    {
        tree.collapseAll();
    }

    function treeExpandAll()
    {
        tree.expandAll();
    }
//]]>
</script>
